{"version":3,"file":"index.cjs","sources":["../projectLog.ts","../JensenClient.ts","../index.ts"],"sourcesContent":["export enum ProjectLogType\n{\n    USER_EVENT = 'User Event',\n    USER_FAILURE = 'User Failure',\n    DATABASE_INFORMATION = 'Database Information',\n    DATABASE_FAILURE = 'Database Failure',\n    SYSTEM_INFORMATION = 'System Information',\n    SYSTEM_FAILURE = 'System Failure',\n    AUTOMATED_INFORMATION = 'Automated Information',\n    AUTOMATED_FAILURE = 'Automated Failure',\n    EXTERNAL_VENDOR_INFORMATION = 'External Vendor Information',\n    EXTERNAL_VENDOR_FAILURE = 'External Vendor Failure',\n}\n\nexport type ProjectLog = \n{\n    content: string;\n    description: string;\n    eventMetadata?: Record<string, any>;\n    eventType: ProjectLogType;\n    timeElapsed?: number | null;\n    userEmailInvoker?: string | null;\n    userNameInvoker?: string | null;\n}","import { ProjectLog, ProjectLogType } from \"./projectLog\";\n\n\nclass JensenDispatcher\n{\n    private projectKey: string;\n    // private url = 'http://localhost:3000/api/logs';\n    private url = 'https://fireblade.jensenlabs.dev/api/logs';\n\n    constructor(projectKey?: string)\n    {\n        this.projectKey = projectKey || process.env.JENSEN_LABS_PROJECT_API_KEY || '';\n        if (!this.projectKey)\n        {\n            throw new Error(\"You must supply a project key for the Jensen Fireblade Client to work.\");\n        }\n    }\n\n\n    public async sendEvent(data: {\n        title: string, \n        description: string, \n        logType: ProjectLogType,\n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        const { title, description, eventMetadata, timeElapsed, userEmailInvoker, userNameInvoker } = data;\n        const projectLog: ProjectLog = {\n            content: title,\n            description: description,\n            eventMetadata: eventMetadata,\n            eventType: ProjectLogType.USER_EVENT,\n            timeElapsed: timeElapsed,\n            userEmailInvoker: userEmailInvoker,\n            userNameInvoker: userNameInvoker\n        };\n\n        const response = await fetch(this.url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${this.projectKey}`,\n            },\n            body: JSON.stringify(projectLog)\n        });\n\n        if (!response.ok)\n        {\n            console.error(response);\n            throw new Error(\"Failed to send event to Jensen API\");\n        }\n    }\n}\n\n/**\n * JensenClient\n * @description The JensenClient class is a wrapper around the JensenDispatcher class that provides a more user-friendly interface for sending events to the Fireblade API.\n * @example\n * ```typescript\n * import { JensenClient } from \"./JensenClient\";\n * const jensen = new JensenClient();\n * jensen.userEvent({\n *      title: 'Test',\n *      description: 'Test'\n * });\n */\nexport class JensenClient extends JensenDispatcher\n{\n    // we want to inherit the constructor and then overload the sendEvent function for each projectlog type\n    // we can use the super keyword to call the parent class constructor\n    constructor(projectKey?: string)\n    {\n        super(projectKey);\n    }\n\n    public async userEvent(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.USER_EVENT\n        });\n    }\n\n    public async userFailure(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.USER_FAILURE\n        });\n    }\n\n    public async databaseInformation(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.DATABASE_INFORMATION\n        });\n    }\n\n    public async databaseFailure(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.DATABASE_FAILURE\n        });\n    }\n\n    public async systemInformation(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.SYSTEM_INFORMATION\n        });\n    }\n\n    public async systemFailure(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.SYSTEM_FAILURE\n        });\n    }\n\n    public async automatedInformation(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.AUTOMATED_INFORMATION\n        });\n    }\n\n    public async automatedFailure(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.AUTOMATED_FAILURE\n        });\n    }\n\n    public async externalVendorInformation(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.EXTERNAL_VENDOR_INFORMATION\n        });\n    }\n\n    public async externalVendorFailure(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.EXTERNAL_VENDOR_FAILURE\n        });\n    }\n\n    public async customEvent(data: {\n        title: string, \n        description: string, \n        logType: ProjectLogType,\n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent(data);\n    }\n}","import { JensenClient } from \"./JensenClient\";\nimport * as dotenv from 'dotenv';\ndotenv.config();\n\nexport default class JensenClientFactory\n{\n    public static createClient(): JensenClient\n    {\n        return new JensenClient(process.env.JENSEN_LABS_PROJECT_API_KEY);\n    }\n}"],"names":["ProjectLogType","JensenClient","_JensenDispatcher2","projectKey","call","this","_proto2","prototype","userEvent","data","Promise","resolve","sendEvent","_extends","logType","USER_EVENT","e","reject","userFailure","USER_FAILURE","databaseInformation","DATABASE_INFORMATION","databaseFailure","DATABASE_FAILURE","systemInformation","SYSTEM_INFORMATION","systemFailure","SYSTEM_FAILURE","automatedInformation","AUTOMATED_INFORMATION","automatedFailure","AUTOMATED_FAILURE","externalVendorInformation","EXTERNAL_VENDOR_INFORMATION","externalVendorFailure","EXTERNAL_VENDOR_FAILURE","customEvent","JensenDispatcher","url","process","env","JENSEN_LABS_PROJECT_API_KEY","Error","fetch","method","headers","Authorization","body","JSON","stringify","content","title","description","eventMetadata","eventType","timeElapsed","userEmailInvoker","userNameInvoker","then","response","ok","console","error","dotenv","config","JensenClientFactory","createClient"],"mappings":"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"}
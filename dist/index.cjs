function e(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach(function(r){if("default"!==r){var n=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,n.get?n:{enumerable:!0,get:function(){return e[r]}})}}),t.default=e,t}var t,r=/*#__PURE__*/e(require("dotenv"));function n(){return n=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)({}).hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},n.apply(null,arguments)}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}!function(e){e.USER_EVENT="User Event",e.USER_FAILURE="User Failure",e.DATABASE_INFORMATION="Database Information",e.DATABASE_FAILURE="Database Failure",e.SYSTEM_INFORMATION="System Information",e.SYSTEM_FAILURE="System Failure",e.AUTOMATED_INFORMATION="Automated Information",e.AUTOMATED_FAILURE="Automated Failure",e.EXTERNAL_VENDOR_INFORMATION="External Vendor Information",e.EXTERNAL_VENDOR_FAILURE="External Vendor Failure"}(t||(t={}));var i=/*#__PURE__*/function(e){function r(t){return e.call(this,t)||this}var i,s;s=e,(i=r).prototype=Object.create(s.prototype),i.prototype.constructor=i,o(i,s);var u=r.prototype;return u.userEvent=function(e){try{return Promise.resolve(this.sendEvent(n({},e,{logType:t.USER_EVENT})))}catch(e){return Promise.reject(e)}},u.userFailure=function(e){try{return Promise.resolve(this.sendEvent(n({},e,{logType:t.USER_FAILURE})))}catch(e){return Promise.reject(e)}},u.databaseInformation=function(e){try{return Promise.resolve(this.sendEvent(n({},e,{logType:t.DATABASE_INFORMATION})))}catch(e){return Promise.reject(e)}},u.databaseFailure=function(e){try{return Promise.resolve(this.sendEvent(n({},e,{logType:t.DATABASE_FAILURE})))}catch(e){return Promise.reject(e)}},u.systemInformation=function(e){try{return Promise.resolve(this.sendEvent(n({},e,{logType:t.SYSTEM_INFORMATION})))}catch(e){return Promise.reject(e)}},u.systemFailure=function(e){try{return Promise.resolve(this.sendEvent(n({},e,{logType:t.SYSTEM_FAILURE})))}catch(e){return Promise.reject(e)}},u.automatedInformation=function(e){try{return Promise.resolve(this.sendEvent(n({},e,{logType:t.AUTOMATED_INFORMATION})))}catch(e){return Promise.reject(e)}},u.automatedFailure=function(e){try{return Promise.resolve(this.sendEvent(n({},e,{logType:t.AUTOMATED_FAILURE})))}catch(e){return Promise.reject(e)}},u.externalVendorInformation=function(e){try{return Promise.resolve(this.sendEvent(n({},e,{logType:t.EXTERNAL_VENDOR_INFORMATION})))}catch(e){return Promise.reject(e)}},u.externalVendorFailure=function(e){try{return Promise.resolve(this.sendEvent(n({},e,{logType:t.EXTERNAL_VENDOR_FAILURE})))}catch(e){return Promise.reject(e)}},u.customEvent=function(e){try{return Promise.resolve(this.sendEvent(e))}catch(e){return Promise.reject(e)}},r}(/*#__PURE__*/function(){function e(e){if(this.projectKey=void 0,this.url="https://fireblade.jensenlabs.dev/api/logs",this.projectKey=e||process.env.JENSEN_LABS_PROJECT_API_KEY||"",!this.projectKey)throw new Error("You must supply a project key for the Jensen Fireblade Client to work.")}return e.prototype.sendEvent=function(e){try{return Promise.resolve(fetch(this.url,{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer "+this.projectKey},body:JSON.stringify({content:e.title,description:e.description,eventMetadata:e.eventMetadata,eventType:t.USER_EVENT,timeElapsed:e.timeElapsed,userEmailInvoker:e.userEmailInvoker,userNameInvoker:e.userNameInvoker})})).then(function(e){if(!e.ok)throw console.error(e),new Error("Failed to send event to Jensen API")})}catch(e){return Promise.reject(e)}},e}());r.config(),module.exports=/*#__PURE__*/function(){function e(){}return e.createClient=function(){return new i(process.env.JENSEN_LABS_PROJECT_API_KEY)},e}();
//# sourceMappingURL=index.cjs.map

{"version":3,"file":"index.umd.js","sources":["../projectLog.ts","../JensenClient.ts","../index.ts"],"sourcesContent":["export enum ProjectLogType\n{\n    USER_EVENT = 'User Event',\n    USER_FAILURE = 'User Failure',\n    DATABASE_INFORMATION = 'Database Information',\n    DATABASE_FAILURE = 'Database Failure',\n    SYSTEM_INFORMATION = 'System Information',\n    SYSTEM_FAILURE = 'System Failure',\n    AUTOMATED_INFORMATION = 'Automated Information',\n    AUTOMATED_FAILURE = 'Automated Failure',\n    EXTERNAL_VENDOR_INFORMATION = 'External Vendor Information',\n    EXTERNAL_VENDOR_FAILURE = 'External Vendor Failure',\n}\n\nexport type ProjectLog = \n{\n    content: string;\n    description: string;\n    eventMetadata?: Record<string, any>;\n    eventType: ProjectLogType;\n    timeElapsed?: number | null;\n    userEmailInvoker?: string | null;\n    userNameInvoker?: string | null;\n}","import { ProjectLog, ProjectLogType } from \"./projectLog\";\n\n\nclass JensenDispatcher\n{\n    private projectKey: string;\n    // private url = 'http://localhost:3000/api/logs';\n    private url = 'https://fireblade.jensenlabs.dev/api/logs';\n\n    constructor()\n    {\n        // grab a possible of publicly available keys based on different frameworks\n        // for instance, NEXT_PUBLIC_FIREBLADE_API_KEY for Next.js\n        // or REACT_APP_FIREBLADE_API_KEY for React\n        const publicProjectKey = process.env.NEXT_PUBLIC_FIREBLADE_API_KEY || process.env.REACT_APP_FIREBLADE_API_KEY || process.env.FIREBLADE_API_KEY || '';\n        this.projectKey = publicProjectKey;\n        if (!this.projectKey)\n        {\n            throw new Error(\"You must supply a project key for the Jensen Fireblade Client to work.\");\n        }\n    }\n\n\n    public async sendEvent(data: {\n        title: string, \n        description: string, \n        logType: ProjectLogType,\n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        const { title, description, eventMetadata, timeElapsed, userEmailInvoker, userNameInvoker } = data;\n        const projectLog: ProjectLog = {\n            content: title,\n            description: description,\n            eventMetadata: eventMetadata,\n            eventType: ProjectLogType.USER_EVENT,\n            timeElapsed: timeElapsed,\n            userEmailInvoker: userEmailInvoker,\n            userNameInvoker: userNameInvoker\n        };\n\n        const response = await fetch(this.url, {\n            method: 'POST',\n            body: JSON.stringify({\n                log: projectLog,\n                apiKey: this.projectKey\n            })\n        });\n\n        if (!response.ok)\n        {\n            console.error(response);\n            throw new Error(\"Failed to send event to Jensen API\");\n        }\n    }\n}\n\n/**\n * JensenClient\n * @description The JensenClient class is a wrapper around the JensenDispatcher class that provides a more user-friendly interface for sending events to the Fireblade API.\n * @example\n * ```typescript\n * import { JensenClient } from \"./JensenClient\";\n * const jensen = new JensenClient();\n * jensen.userEvent({\n *      title: 'Test',\n *      description: 'Test'\n * });\n */\nexport class JensenClient extends JensenDispatcher\n{\n    // we want to inherit the constructor and then overload the sendEvent function for each projectlog type\n    // we can use the super keyword to call the parent class constructor\n    constructor()\n    {\n        super();\n    }\n\n    public async userEvent(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.USER_EVENT\n        });\n    }\n\n    public async userFailure(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.USER_FAILURE\n        });\n    }\n\n    public async databaseInformation(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.DATABASE_INFORMATION\n        });\n    }\n\n    public async databaseFailure(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.DATABASE_FAILURE\n        });\n    }\n\n    public async systemInformation(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.SYSTEM_INFORMATION\n        });\n    }\n\n    public async systemFailure(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.SYSTEM_FAILURE\n        });\n    }\n\n    public async automatedInformation(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.AUTOMATED_INFORMATION\n        });\n    }\n\n    public async automatedFailure(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.AUTOMATED_FAILURE\n        });\n    }\n\n    public async externalVendorInformation(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.EXTERNAL_VENDOR_INFORMATION\n        });\n    }\n\n    public async externalVendorFailure(data: {\n        title: string, \n        description: string, \n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent({\n            ...data,\n            logType: ProjectLogType.EXTERNAL_VENDOR_FAILURE\n        });\n    }\n\n    public async customEvent(data: {\n        title: string, \n        description: string, \n        logType: ProjectLogType,\n        eventMetadata?: Record<string, any>,\n        timeElapsed?: number | null,\n        userEmailInvoker?: string | null,\n        userNameInvoker?: string | null\n    }): Promise<void>\n    {\n        return this.sendEvent(data);\n    }\n}","import { JensenClient } from \"./JensenClient\";\nimport * as dotenv from 'dotenv';\ndotenv.config();\n\nexport default class JensenClientFactory\n{\n    public static createClient(): JensenClient\n    {\n        return new JensenClient();\n    }\n}"],"names":["ProjectLogType","JensenClient","_JensenDispatcher2","call","this","_proto2","prototype","userEvent","data","Promise","resolve","sendEvent","_extends","logType","USER_EVENT","e","reject","userFailure","USER_FAILURE","databaseInformation","DATABASE_INFORMATION","databaseFailure","DATABASE_FAILURE","systemInformation","SYSTEM_INFORMATION","systemFailure","SYSTEM_FAILURE","automatedInformation","AUTOMATED_INFORMATION","automatedFailure","AUTOMATED_FAILURE","externalVendorInformation","EXTERNAL_VENDOR_INFORMATION","externalVendorFailure","EXTERNAL_VENDOR_FAILURE","customEvent","JensenDispatcher","projectKey","url","publicProjectKey","process","env","NEXT_PUBLIC_FIREBLADE_API_KEY","REACT_APP_FIREBLADE_API_KEY","FIREBLADE_API_KEY","Error","fetch","method","body","JSON","stringify","log","content","title","description","eventMetadata","eventType","timeElapsed","userEmailInvoker","userNameInvoker","apiKey","then","response","ok","console","error","dotenv","config","JensenClientFactory","createClient"],"mappings":"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"}